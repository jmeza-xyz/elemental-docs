"use strict";(self.webpackChunkelemental_docs=self.webpackChunkelemental_docs||[]).push([[7424],{84357:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=t(85893),a=t(11151);const r={sidebar_label:"Building raw disk images for Raspberry Pi",title:""},s=void 0,o={id:"raspi-disk",title:"",description:"How to build raw disk images for Raspberry Pi",source:"@site/docs/raspi-disk.md",sourceDirName:".",slug:"/raspi-disk",permalink:"/next/raspi-disk",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Building raw disk images for Raspberry Pi",title:""},sidebar:"docs",previous:{title:"Air-Gapped Installation",permalink:"/next/airgap"},next:{title:"Rancher upgrades",permalink:"/next/troubleshooting-rancher-upgrades"}},d={},l=[{value:"How to build raw disk images for Raspberry Pi",id:"how-to-build-raw-disk-images-for-raspberry-pi",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t,{children:(0,i.jsx)("link",{rel:"canonical",href:"https://elemental.docs.rancher.com/raspi-disk"})}),"\n",(0,i.jsx)(n.h3,{id:"how-to-build-raw-disk-images-for-raspberry-pi",children:"How to build raw disk images for Raspberry Pi"}),"\n",(0,i.jsx)(n.p,{children:"This guide will show how we can build a raw disk image that can be written to an SD-card and booted without any other installation media."}),"\n",(0,i.jsxs)(n.admonition,{type:"caution",children:[(0,i.jsx)(n.p,{children:"Any data on the SD-card will be erased, please only use a SD-card without anything important on it."}),(0,i.jsxs)(n.p,{children:["The SD-card must be reasonably large (32 GB or more) and ",(0,i.jsx)(n.strong,{children:"fast"})," (!!)."]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="SeedImage resource" showLineNumbers',children:"apiVersion: elemental.cattle.io/v1beta1\nkind: SeedImage\nmetadata:\n  name: fire-img\n  namespace: fleet-default\nspec:\n  type: raw\n  baseImage: registry.opensuse.org/isv/rancher/elemental/dev/containers/suse/sle-micro/5.5:latest\n  targetPlatform: linux/arm64\n  registrationRef:\n    apiVersion: elemental.cattle.io/v1beta1\n    kind: MachineRegistration\n    name: fire-nodes\n    namespace: fleet-default\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check the logs for the build pod using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"kubectl logs -n fleet-default fire-img -f -c build\n"})}),"\n",(0,i.jsx)(n.p,{children:"When the build is finished we can download the image file using wget:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'wget --no-check-certificate $(kubectl get seedimage -n fleet-default fire-img -o jsonpath="{.status.downloadURL}") -O sle-micro.arm64.raw\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can write the ",(0,i.jsx)(n.code,{children:".raw"})," image to the SD-card. This can be done with ",(0,i.jsx)(n.code,{children:"dd"})," on the Linux command line if you're comfortable with this command.\n",(0,i.jsx)(n.a,{href:"https://www.opensuse.org",children:"openSUSE"})," has nice instructions on how to write an image to a storage medium for ",(0,i.jsx)(n.a,{href:"https://en.opensuse.org/SDB:Live_USB_stick",children:"Linux"}),",\n",(0,i.jsx)(n.a,{href:"https://en.opensuse.org/SDB:Create_a_Live_USB_stick_using_Windows",children:"Windows"}),", and ",(0,i.jsx)(n.a,{href:"https://en.opensuse.org/SDB:Create_a_Live_USB_stick_using_macOS",children:"OS X"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var i=t(67294);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);