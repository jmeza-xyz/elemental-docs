"use strict";(self.webpackChunkelemental_docs=self.webpackChunkelemental_docs||[]).push([[2294],{8364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=t(17624),o=t(4552),r=t(44668);const s={sidebar_label:"Declarative Networking",title:""},a="Troubleshooting Declarative Networking",c={id:"troubleshooting-network",title:"",description:"Given the following sample registration:",source:"@site/docs/troubleshooting-network.md",sourceDirName:".",slug:"/troubleshooting-network",permalink:"/next/troubleshooting-network",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Declarative Networking",title:""},sidebar:"docs",previous:{title:"Reset",permalink:"/next/troubleshooting-reset"},next:{title:"Release Notes",permalink:"/next/release-notes"}},l={},d=[{value:"On the machine side",id:"on-the-machine-side",level:2},{value:"During reset",id:"during-reset",level:3}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.M)(),...e.components},{CodeBlock:t,Head:s}=n;return t||m("CodeBlock",!0),s||m("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s,{children:(0,i.jsx)("link",{rel:"canonical",href:"https://elemental.docs.rancher.com/troubleshooting-network"})}),"\n","\n","\n",(0,i.jsx)(n.h1,{id:"troubleshooting-declarative-networking",children:"Troubleshooting Declarative Networking"}),"\n",(0,i.jsx)(n.p,{children:"Given the following sample registration:"}),"\n",(0,i.jsx)(t,{language:"yaml",title:"example MachineRegistration using Declarative Networking",showLineNumbers:!0,children:r.c}),"\n",(0,i.jsxs)(n.p,{children:["We can expect each Elemental Machine to be configured using the defined ",(0,i.jsx)(n.code,{children:"nm-configurator"})," ",(0,i.jsx)(n.code,{children:"_all.yaml"})," template."]}),"\n",(0,i.jsxs)(n.p,{children:["At the very first boot, the ",(0,i.jsx)(n.code,{children:"elemental-register"})," will try to contact the Rancher API to register a new ",(0,i.jsx)(n.code,{children:"MachineInventory"}),".",(0,i.jsx)(n.br,{}),"\n","At this stage the machine's network is not configured and will default to DHCP. It is a requirement that the machine is able to contact the Rancher API in this setup, otherwise the registration can not take place."]}),"\n",(0,i.jsxs)(n.p,{children:["Once the ",(0,i.jsx)(n.code,{children:"MachineInventory"})," has first been registered, the ",(0,i.jsx)(n.code,{children:"elemental-operator"})," is going to claim an ",(0,i.jsx)(n.code,{children:"IPAddress"})," for each ",(0,i.jsx)(n.code,{children:"IPPool"})," reference defined in the network configuration.",(0,i.jsx)(n.br,{}),"\n","On the ",(0,i.jsx)(n.code,{children:"MachineInventory"}),", this will look like the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: elemental.cattle.io/v1beta1\nkind: MachineInventory\nmetadata:\n  finalizers:\n  - machineinventory.elemental.cattle.io\n  name: m-e5331e3b-1e1b-4ce7-b080-235ed9a6d07c\n  namespace: fleet-default\nspec:\n  ipAddressClaims:\n    inventory-ip:\n      apiVersion: ipam.cluster.x-k8s.io/v1beta1\n      kind: IPAddressClaim\n      name: m-e5331e3b-1e1b-4ce7-b080-235ed9a6d07c-inventory-ip\n      namespace: fleet-default\n      uid: 78f2d07a-7b6d-4b58-b615-c4108b7964b9\n  ipAddressPools:\n    inventory-ip:\n      apiGroup: ipam.cluster.x-k8s.io\n      kind: InClusterIPPool\n      name: elemental-inventory-pool\n  network:\n    config:\n      dns-resolver:\n        config:\n          search: []\n          server:\n          - 192.168.122.1\n      interfaces:\n      - description: Main-NIC\n        ipv4:\n          address:\n          - ip: "{inventory-ip}"\n            prefix-length: 24\n          dhcp: false\n          enabled: true\n        ipv6:\n          enabled: false\n        name: enp1s0\n        state: up\n        type: ethernet\n      routes:\n        config:\n        - destination: 0.0.0.0/0\n          metric: 150\n          next-hop-address: 192.168.122.1\n          next-hop-interface: enp1s0\n          table-id: 254\n    ipAddresses:\n      inventory-ip: 192.168.122.150\nstatus:\n  conditions:\n  - lastTransitionTime: "2024-07-30T11:50:47Z"\n    message: NetworkConfig is ready\n    reason: ReconcilingNetworkConfig\n    status: "True"\n    type: NetworkConfigReady\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You will notice that the ",(0,i.jsx)(n.code,{children:"MachineInventory"})," carries the same ",(0,i.jsx)(n.code,{children:"network.config"})," as the ",(0,i.jsx)(n.code,{children:"MachineRegistration"}),", however instead of referencing IPAddressPools, we now have a map of real IPAddresses:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"    ipAddresses:\n      inventory-ip: 192.168.122.150\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"inventory-ip"})," will then be substituted in the ",(0,i.jsx)(n.code,{children:"nm-configurator"})," config whenever ",(0,i.jsx)(n.code,{children:"{inventory-ip}"})," has been defined."]}),"\n",(0,i.jsxs)(n.p,{children:["Also note that the ",(0,i.jsx)(n.code,{children:"MachineInventory"})," references and owns each ",(0,i.jsx)(n.code,{children:"IPAddressClaim"})," associated with it. Each claim follow the predictable ",(0,i.jsx)(n.code,{children:"$MachineIventoryName-$IPPoolRefKey"})," naming convention: ",(0,i.jsx)(n.code,{children:"m-e5331e3b-1e1b-4ce7-b080-235ed9a6d07c-inventory-ip"}),".",(0,i.jsx)(n.br,{}),"\n","These claims will follow the lifecycle of the ",(0,i.jsx)(n.code,{children:"MachineInventory"})," object and be deleted on cascade, for example during the ",(0,i.jsx)(n.a,{href:"/next/reset",children:"reset workflow"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:"IPAddresses"})," can not be claimed, the ",(0,i.jsx)(n.code,{children:"NetworkConfigReady"})," condition will be ",(0,i.jsx)(n.code,{children:"False"}),", preventing the machine from completing installation. This can be the case if the ",(0,i.jsx)(n.code,{children:"IPPool"})," has no more ",(0,i.jsx)(n.code,{children:"IPAddresses"})," available."]}),"\n",(0,i.jsx)(n.h2,{id:"on-the-machine-side",children:"On the machine side"}),"\n",(0,i.jsxs)(n.p,{children:["During the installation phase, the ",(0,i.jsx)(n.code,{children:"elemental-register"})," process running on the machine will receive the ",(0,i.jsx)(n.code,{children:"nm-configurator"})," ",(0,i.jsx)(n.code,{children:"_all.yaml"})," config template and the list of claimed IPAddresses with their keys. This information will be digested to an applicable ",(0,i.jsx)(n.code,{children:"nm-configurator"})," configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'config:\n  dns-resolver:\n    config:\n      search: []\n      server:\n      - 192.168.122.1\n  interfaces:\n  - description: Main-NIC\n    ipv4:\n      address:\n      - ip: "192.168.122.150"\n        prefix-length: 24\n      dhcp: false\n      enabled: true\n    ipv6:\n      enabled: false\n    name: enp1s0\n    state: up\n    type: ethernet\n  routes:\n    config:\n    - destination: 0.0.0.0/0\n      metric: 150\n      next-hop-address: 192.168.122.1\n      next-hop-interface: enp1s0\n      table-id: 254\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"elemental-register"})," will then invoke ",(0,i.jsx)(n.code,{children:"nmc generate"})," and ",(0,i.jsx)(n.code,{children:"nmc apply"})," to apply this configuration into the running system.",(0,i.jsx)(n.br,{}),"\n","From this moment until reset, the machine will always use the applied configuration."]}),"\n",(0,i.jsxs)(n.p,{children:["Also note that outside of installation and reset, ",(0,i.jsx)(n.code,{children:"nm-configurator"})," is no longer used, since the ",(0,i.jsx)(n.code,{children:"elemental-register"})," will persist the ",(0,i.jsx)(n.code,{children:"/etc/NetworkManager/system-connection/*.nmconnection"})," files generated by ",(0,i.jsx)(n.code,{children:"nmc"})," rather than the ",(0,i.jsx)(n.code,{children:"nmc"})," configuration itself."]}),"\n",(0,i.jsxs)(n.p,{children:["For example on any running system, you will find a ",(0,i.jsx)(n.a,{href:"https://github.com/rancher/yip",children:"yip"})," configuration file (",(0,i.jsx)(n.code,{children:"/oem/94_custom.yaml"}),") to apply the desired ",(0,i.jsx)(n.code,{children:"nmconnections"}),", for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Apply network config\nstages:\n    initramfs:\n        - files:\n            - path: /etc/NetworkManager/system-connections/Wired connection 1.nmconnection\n              permissions: 384\n              owner: 0\n              group: 0\n              content: |\n                [connection]\n                id=Wired connection 1\n                uuid=d26b4ae4-d525-3cbf-a557-33feb60343c0\n                type=ethernet\n                autoconnect-priority=-999\n                interface-name=enp1s0\n                timestamp=1722340245\n\n                [ethernet]\n\n                [ipv4]\n                address1=192.168.122.150/24\n                dhcp-timeout=2147483647\n                dns=192.168.122.1;\n                dns-options=\n                dns-priority=40\n                method=manual\n                route1=0.0.0.0/0,192.168.122.1,150\n                route1_options=table=254\n\n                [ipv6]\n                addr-gen-mode=eui64\n                dhcp-timeout=2147483647\n                method=disabled\n\n                [proxy]\n\n                [user]\n                nm-configurator.interface.description=Main-NIC\n              encoding: ""\n              ownerstring: ""\n'})}),"\n",(0,i.jsx)(n.h3,{id:"during-reset",children:"During reset"}),"\n",(0,i.jsxs)(n.p,{children:["Whenever ",(0,i.jsx)(n.a,{href:"/next/reset",children:"reset"})," is triggered, the ",(0,i.jsx)(n.code,{children:"elemental-register"})," running on the machine will clear any ",(0,i.jsx)(n.code,{children:"/etc/NetworkManager/system-connection/*.nmconnection"})," file and restart the network stack. The machine should then revert to DHCP and after that confirm to the ",(0,i.jsx)(n.code,{children:"elemental-operator"})," on the management side, that reset has succeeded."]}),"\n",(0,i.jsxs)(n.p,{children:["Following that, the machine should reboot into recovery mode, perform the actual reset and receive a fresh network configuration to be applied. Potentially this will be the same as before (if the ",(0,i.jsx)(n.code,{children:"MachineRegistration"})," has not been updated), or it may have different IPs since the previous ones may have been claimed by other machines in the meanwhile."]}),"\n",(0,i.jsxs)(n.p,{children:["If reverting to DHCP failed or the machine is anyhow unable to contact the Rancher API back for confirmation, you will notice that the ",(0,i.jsx)(n.code,{children:"MachineInventory"})," will not be deleted, despite having a deletion timestamp.",(0,i.jsx)(n.br,{}),"\n","Since the machine has now network issue, it won't be possible to remotely fix it."]}),"\n",(0,i.jsxs)(n.p,{children:["You have the option to physically reach the machine or by any means fix the DHCP driven network configuration, or alternatively you can remove the ",(0,i.jsx)(n.code,{children:"machineinventory.elemental.cattle.io"})," finalizer from the ",(0,i.jsx)(n.code,{children:"MachineInventory"}),", to allow deletion, if you intend to decommission the machine."]})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function m(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},44668:(e,n,t)=>{t.d(n,{c:()=>i});const i='apiVersion: ipam.cluster.x-k8s.io/v1alpha2\nkind: InClusterIPPool\nmetadata:\n  name: elemental-inventory-pool\n  namespace: fleet-default\nspec:\n  addresses:\n    - 192.168.122.150-192.168.122.200\n  prefix: 24\n  gateway: 192.168.122.1\n---\napiVersion: elemental.cattle.io/v1beta1\nkind: MachineRegistration\nmetadata:\n  name: fire-nodes\n  namespace: fleet-default\nspec:\n  machineName: m-${System Information/UUID}\n  config:\n    network:\n      configurator: nmc\n      ipAddresses:\n        inventory-ip:\n          apiGroup: ipam.cluster.x-k8s.io\n          kind: InClusterIPPool\n          name: elemental-inventory-pool\n      config:\n        dns-resolver:\n          config:\n            server:\n            - 192.168.122.1\n            search: []\n        routes:\n          config:\n          - destination: 0.0.0.0/0\n            next-hop-interface: enp1s0\n            next-hop-address: 192.168.122.1\n            metric: 150\n            table-id: 254\n        interfaces:\n          - name: enp1s0\n            type: ethernet\n            description: Main-NIC\n            state: up\n            ipv4:\n              enabled: true\n              dhcp: false\n              address:\n              - ip: "{inventory-ip}"\n                prefix-length: 24\n            ipv6:\n              enabled: false\n'},4552:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>s});var i=t(11504);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);